<html>
<head>
<meta id='metaFileNameId' name='id' content='25497' />
<title>Scales</title>
<link type='text/css' href='xstyle.css' rel='stylesheet' media='all' />
<script src='script.js' language='javascript' type='text/javascript'> </script>
<script src='common.js' language='javascript' type='text/javascript'> </script>
<xml>
<MSHelp:Attr Name="Product" Value="JChart">
</xml>
</head>
<body style='margin: 0;'>
<img src='collapse.png' title='Collapse Section' id='collapseImage' style='display: none; height: 0; width: 0;' /><img src='expand.png' title='Expand Section' id='expandImage' style='display: none; height: 0; width: 0;' /><img src='collapsesmall.png' title='Collapse All' id='collapseAllImage' style='display: none; height: 0; width: 0;' /><img src='expandsmall.png' title='Expand All' id='expandAllImage' style='display: none; height: 0; width: 0;' /><input type="hidden" id="userDataCache" class="userDataStyle"><img src='arrow.png' title='DropDown image' id='dropDownImage' style='display: none; height: 0; width: 0;' /><img src='arrowh.png' title='DropDown image' id='dropDownHoverImage' style='display: none; height: 0; width: 0;' /><img src='copycode.png' title='Copy Code' id='copyCodeImage' style='display: none; height: 0; width: 0;' /><img src='copycodeh.png' title='Copy Code' id='copyCodeHoverImage' style='display: none; height: 0; width: 0;' /><div id='nsbanner'>
<table class='bannerparthead' cellspacing='0'>
<tr>
<td><span class='gtitle'>MindFusion.Charting for Java Programmer's Guide</span></td>
</tr>
<tr>
<td style='border-bottom: solid 1px #C8CDDE;'><span class='title'>Scales</span></td>
</tr>
</table>
</div>
<div id='nstext'>
<p>As discussed in the <a id='25496' href='Overview_4.htm' title=''>Overview</a> topic, the scales are the most important component of a gauge. The scales display ticks and labels, they arrange pointers and also maintain ranges and other auxiliary elements. There are two types of scales – oval and linear. The oval scale distributes its elements in a circle, the linear scale distributes its element on a vertical or horizontal axis depending on its orientation. The oval and linear scales are represented by the <a id='79044' href='T_com_mindfusion_charting_components_gauges_OvalScale.htm' title=''>OvalScale</a> and <a id='79002' href='T_com_mindfusion_charting_components_gauges_LinearScale.htm' title=''>LinearScale</a> classes respectively. These classes share a common base class – <a id='78828' href='T_com_mindfusion_charting_components_gauges_BaseScale.htm' title=''>BaseScale</a> and apart from the difference in their layout logic they are very similar.</p><h2>Customization</h2><h3>Geometry</h3><p>The scales display a geometry according to its type. The elements displayed in the scale are aligned and arranged relative to the scale geometry. The geometry is either circular, for oval scale, or trapezoidal, for linear scales. The following figures show the geometries of oval and horizontal and vertical linear scales.</p><p><table cellspacing='0' style='width: 100%;' class='common'><col width='33%'></col><col width='33%'></col><col width='34%'></col><tr><th><p>Oval</p></th><th><p>Horizontal Linear</p></th><th><p>Vertical Linear</p></th></tr><tr><td><p><img src='Scales2.png' title='' hspace='0' vspace='0' align='' width='229' height='216'/></p></td><td><p><img src='Scales3.png' title='' hspace='0' vspace='0' align='' width='229' height='37'/></p></td><td><p><img src='Scales4.png' title='' hspace='0' vspace='0' align='' width='39' height='213'/></p></td></tr></table></p><p>The scale geometry can be customized through various properties. The fill and stroke of the geometry are defined by the Fill and Stroke properties. The start and end width are specified through the StartWidth and EndWidth properties. These properties are of type Length and can express relative values. See the Metrics section at the end of this topic for additional information regarding this. The start and end angles of the oval geometry can be specified through the <a id='79051' href='M_com_mindfusion_charting_components_gauges_OvalScale_getStartAngle_0.htm' title=''>StartAngle</a> and <a id='79048' href='M_com_mindfusion_charting_components_gauges_OvalScale_getEndAngle_0.htm' title=''>EndAngle</a> properties of the <a id='79044' href='T_com_mindfusion_charting_components_gauges_OvalScale.htm' title=''>OvalScale</a> class respectively. Both properties are expressed in degrees.</p><h3>Data</h3>The MinValue and MaxValue properties can be used to define the range of values displayed on the scale. The distribution of the values along the scale geometry is determined by the FunctionType property and can be <a id='78932' href='T_com_mindfusion_charting_components_gauges_FunctionType.htm' title=''>Linear</a>, <span class='repeatingLink'>Logarithmic</span> or <span class='repeatingLink'>Custom</span>. The base of the logarithmic distribution is specified through the LogarithmBase property. The custom value distribution function is supplied through the CustomFunction and ReversedCustomFunction properties.<p></p><p></p><h3>Custom Painting</h3>The appearance of the scale can be further customized by handling one of the PrepaintScale and PaintScale events. The former is raised before the default scale rendering, the latter is raised afterwards. The following code demonstrates a sample PaintScale event handler which draws a star on top of the scale:<p><table class='syntax' codeLanguage='Java' cellspacing='0'><tr><th><span style='float: left;'>Java</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>public void paintScale(CustomPaintEvent e)<br/>{<br/>&#160;&#160;&#160;&#160;PathFigure path = new PathFigure("M0.5,0.02 L0.62,0.36 L0.98,0.36 L0.7,0.58 L0.8,0.92 L0.5,0.72 L0.2,0.92 L0.3,0.58 L0.02,0.36 L0.38,0.36 L0.5,0.02");<br/>&#160;&#160;&#160;&#160;path.setStroke(new Pen(Colors.Black));<br/>&#160;&#160;&#160;&#160;path.setFill(Brushes.Lime);</p><p>&#160;&#160;&#160;&#160;double height = e.getElement().getActualHeight();<br/>&#160;&#160;&#160;&#160;double width = e.getElement().getActualWidth();<br/>&#160;&#160;&#160;&#160;<br/>&#160;&#160;&#160;&#160;double shapeSize = 3.2;<br/>&#160;&#160;&#160;&#160;path.setMargin(new Margins(width / 2 - shapeSize / 2,<br/>&#160;&#160;&#160;&#160;&#160;&#160;height/4, width / 2 - shapeSize / 2, height / 4 - shapeSize));<br/>&#160;&#160;&#160;&#160;<br/>&#160;&#160;&#160;&#160;e.paintVisualElement(path, new XDimension2D.Double(width, height));<br/>}</p></td></tr></table></p><p></p>The above method will render a scale similar to the one below:<h2><img src='custom-clock-gauge.png' title='' hspace='0' vspace='0' align='' width='260' height='263'/></h2><h2>Scale Elements</h2>Various elements can be added to a scale, including ticks, labels and pointers.<h3>Ticks and Labels</h3><p>The ticks and labels represent cornerstones along the scale, usually round values. The ticks and labels are created and added to the scales implicitly according to the specified settings. There are three categories of ticks and labels – major, middle and minor. Each category has corresponding settings, exposed respectively by the <a id='78842' href='M_com_mindfusion_charting_components_gauges_BaseScale_getMajorTickSettings_0.htm' title=''>MajorTickSettings</a>, <a id='78844' href='M_com_mindfusion_charting_components_gauges_BaseScale_getMiddleTickSettings_0.htm' title=''>MiddleTickSettings</a> and <a id='78845' href='M_com_mindfusion_charting_components_gauges_BaseScale_getMinorTickSettings_0.htm' title=''>MinorTickSettings</a> properties of the <a id='78828' href='T_com_mindfusion_charting_components_gauges_BaseScale.htm' title=''>BaseScale</a> class. These settings provide properties for specifying the number of ticks along the scale, their alignment and appearance, the format of their associated label, and more. For additional information about ticks and labels refer to the <a id='25498' href='Ticks_and_Labels_5.htm' title=''>Ticks and Labels</a> topic.</p><h3>Pointers</h3><p>The pointers represent needles or similar types of indicators within the scale. They are used to visualize a current measurement within the scale. For example, in a car speedometer the pointers are used to indicate the current speed. Pointers can be added to the scale through the Pointers property. Pointers expose numerous properties that can be used to customize their appearance. For additional information check the <a id='25499' href='Pointers_5.htm' title=''>Pointers</a> topic.</p><h3>Ranges</h3><p>The ranges emphasize portions of the scale which represent particular interest. An example of a range is the red zone of a car cyclometer. Ranges are added to the scale through the <a id='78848' href='M_com_mindfusion_charting_components_gauges_BaseScale_getRanges_0.htm' title=''>Ranges</a> property. For extensive information on how to use and setup ranges, refer to the <a id='25500' href='Ranges_5.htm' title=''>Ranges</a> topic.</p><h2>Interaction</h2><p>Users can interactively adjust the value of the pointers in the scale by clicking anywhere within the scale bounds. Interactivity only applies to pointers with <a id='79077' href='M_com_mindfusion_charting_components_gauges_Pointer_getIsInteractive_0.htm' title=''>IsInteractive</a> property set to <b>true</b>. When the value of a pointer is changed interactively, the ValueChanged of the pointer is raised.</p><h2>Metrics</h2><p>The sizes of various scale elements can be specified either relatively to the size of the scale or as absolute values. This applies to all properties of type <a id='78973' href='T_com_mindfusion_charting_components_gauges_Length.htm' title=''>Length</a>. The following example defines a pointer with relative width and height:</p><p><table class='syntax' codeLanguage='Java' cellspacing='0'><tr><th><span style='float: left;'>Java</span>
<span class='copyCode' onclick='CopyCode(this);' onkeypress='CopyCode_CheckKey(this);' onmouseover='ChangeCopyCodeIcon(this, true);' onmouseout='ChangeCopyCodeIcon(this, false);'>
<img src='copycode.png' title='Copy Code' style='border-width: 0;' />&#160;Copy Code</span>
</th></tr><tr><td><p>Pointer pointer = new Pointer();<br/>pointer.setPointerWidth(new Length(100, LengthType.Relative));<br/>pointer.setPointerHeight(new Length(50, LengthType.Relative));</p></td></tr></table></p><p>Relative sizes are calculated differently depending on the type of scale. In oval scales relative sizes are calculated based on the radius of the scale. Therefore the above pointer will extend from the center to the outer edge of the scale. In linear scales sizes are based on the width or height of the scale depending on the scale orientation.</p>
</div>
<div id='nsfooter'>
<table class='footer' cellspacing='0'>
<tr>
<td valign='middle'>
<span class='copyright'>© 2022 MindFusion</span>
</td>
</tr>
</table>
</div>
</body>
</html>
